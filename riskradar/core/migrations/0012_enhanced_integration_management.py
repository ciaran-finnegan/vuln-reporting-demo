# Generated by Django 5.2.1 on 2025-01-06 09:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0011_systemlog'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # =====================================
        # ENHANCE EXISTING SCANNER INTEGRATION
        # =====================================
        migrations.AddField(
            model_name='scannerintegration',
            name='integration_type',
            field=models.CharField(
                choices=[
                    ('file_upload', 'File Upload'),
                    ('api', 'API Connection'),
                    ('cloud_storage', 'Cloud Storage'),
                    ('webhook', 'Webhook'),
                    ('database', 'Database Connection'),
                    ('message_queue', 'Message Queue'),
                    ('custom', 'Custom Integration'),
                ],
                default='file_upload',
                max_length=20
            ),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='vendor',
            field=models.CharField(blank=True, help_text="Vendor name (e.g., 'Tenable', 'Qualys')", max_length=100),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='logo_url',
            field=models.URLField(blank=True, help_text="Integration logo URL"),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='status',
            field=models.CharField(
                choices=[
                    ('inactive', 'Inactive'),
                    ('active', 'Active'),
                    ('testing', 'Testing'),
                    ('error', 'Error'),
                    ('maintenance', 'Maintenance'),
                    ('deprecated', 'Deprecated'),
                ],
                default='inactive',
                max_length=20
            ),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='environment',
            field=models.CharField(
                choices=[
                    ('development', 'Development'),
                    ('staging', 'Staging'),
                    ('production', 'Production'),
                ],
                default='production',
                max_length=20
            ),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='connection_config',
            field=models.JSONField(blank=True, default=dict, help_text="Connection settings, credentials, endpoints"),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='sync_enabled',
            field=models.BooleanField(default=False, help_text="Enable automatic syncing"),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='sync_schedule',
            field=models.CharField(blank=True, help_text="Cron expression (e.g., '0 2 * * *')", max_length=100),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='sync_timezone',
            field=models.CharField(default='UTC', help_text="Timezone for scheduling", max_length=50),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='last_sync_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='last_sync_status',
            field=models.CharField(
                blank=True,
                choices=[
                    ('success', 'Success'),
                    ('error', 'Error'),
                    ('partial', 'Partial Success'),
                    ('timeout', 'Timeout'),
                    ('cancelled', 'Cancelled'),
                ],
                max_length=20
            ),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='next_sync_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='consecutive_failures',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='total_error_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='last_error_message',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='last_error_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='health_score',
            field=models.IntegerField(default=100, help_text="0-100 health score based on recent performance"),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='rate_limit_config',
            field=models.JSONField(blank=True, default=dict, help_text="Rate limiting and throttling settings"),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='data_processing_config',
            field=models.JSONField(blank=True, default=dict, help_text="Data processing and transformation settings"),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='notification_config',
            field=models.JSONField(blank=True, default=dict, help_text="Alert and notification configuration"),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='metadata',
            field=models.JSONField(blank=True, default=dict, help_text="Additional metadata and custom fields"),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='total_records_processed',
            field=models.BigIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='total_assets_created',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='total_vulnerabilities_created',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='total_findings_created',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='average_sync_duration',
            field=models.FloatField(blank=True, help_text="Average sync time in minutes", null=True),
        ),
        migrations.AddField(
            model_name='scannerintegration',
            name='feature_flags',
            field=models.JSONField(blank=True, default=dict, help_text="Enable/disable specific features"),
        ),
        
        # =====================================
        # CREATE INTEGRATION TEMPLATE TABLE
        # =====================================
        migrations.CreateModel(
            name='IntegrationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('vendor', models.CharField(max_length=100)),
                ('integration_type', models.CharField(
                    choices=[
                        ('file_upload', 'File Upload'),
                        ('api', 'API Connection'),
                        ('cloud_storage', 'Cloud Storage'),
                        ('webhook', 'Webhook'),
                        ('database', 'Database Connection'),
                        ('message_queue', 'Message Queue'),
                        ('custom', 'Custom Integration'),
                    ],
                    max_length=20
                )),
                ('logo_url', models.URLField(blank=True)),
                ('description', models.TextField()),
                ('status', models.CharField(
                    choices=[
                        ('available', 'Available'),
                        ('coming_soon', 'Coming Soon'),
                        ('beta', 'Beta'),
                        ('deprecated', 'Deprecated'),
                    ],
                    default='available',
                    max_length=20
                )),
                ('default_config', models.JSONField(default=dict, help_text="Default connection configuration")),
                ('required_fields', models.JSONField(default=list, help_text="List of required configuration fields")),
                ('optional_fields', models.JSONField(default=list, help_text="List of optional configuration fields")),
                ('field_mappings_template', models.JSONField(default=list, help_text="Pre-configured field mappings")),
                ('setup_instructions', models.TextField(blank=True, help_text="Markdown formatted setup instructions")),
                ('documentation_url', models.URLField(blank=True)),
                ('support_contact', models.EmailField(blank=True)),
                ('validation_rules', models.JSONField(default=dict, help_text="Validation rules for configuration")),
                ('capabilities', models.JSONField(default=list, help_text="List of integration capabilities")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'integration_templates',
                'ordering': ['vendor', 'name'],
            },
        ),
        
        # =====================================
        # CREATE INTEGRATION SYNC LOG TABLE
        # =====================================
        migrations.CreateModel(
            name='IntegrationSyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sync_id', models.UUIDField(default=uuid.uuid4, help_text="Unique identifier for this sync session", unique=True)),
                ('trigger_type', models.CharField(
                    choices=[
                        ('scheduled', 'Scheduled'),
                        ('manual', 'Manual'),
                        ('webhook', 'Webhook'),
                        ('retry', 'Retry'),
                    ],
                    max_length=20
                )),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(
                    choices=[
                        ('running', 'Running'),
                        ('success', 'Success'),
                        ('error', 'Error'),
                        ('partial', 'Partial Success'),
                        ('timeout', 'Timeout'),
                        ('cancelled', 'Cancelled'),
                    ],
                    max_length=20
                )),
                ('records_processed', models.IntegerField(default=0)),
                ('records_created', models.IntegerField(default=0)),
                ('records_updated', models.IntegerField(default=0)),
                ('records_failed', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('error_details', models.JSONField(blank=True, default=dict, help_text="Detailed error information")),
                ('performance_metrics', models.JSONField(blank=True, default=dict, help_text="Performance and timing metrics")),
                ('sync_summary', models.JSONField(blank=True, default=dict, help_text="Summary of sync results")),
                ('integration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='core.scannerintegration')),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'integration_sync_logs',
                'ordering': ['-started_at'],
            },
        ),
        
        # =====================================
        # CREATE INTEGRATION ALERT TABLE
        # =====================================
        migrations.CreateModel(
            name='IntegrationAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(
                    choices=[
                        ('sync_failure', 'Sync Failure'),
                        ('consecutive_failures', 'Consecutive Failures'),
                        ('health_degraded', 'Health Degraded'),
                        ('quota_exceeded', 'Quota Exceeded'),
                        ('connection_error', 'Connection Error'),
                        ('data_quality_issue', 'Data Quality Issue'),
                        ('performance_degraded', 'Performance Degraded'),
                        ('configuration_error', 'Configuration Error'),
                    ],
                    max_length=30
                )),
                ('severity', models.CharField(
                    choices=[
                        ('low', 'Low'),
                        ('medium', 'Medium'),
                        ('high', 'High'),
                        ('critical', 'Critical'),
                    ],
                    max_length=20
                )),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('status', models.CharField(
                    choices=[
                        ('active', 'Active'),
                        ('acknowledged', 'Acknowledged'),
                        ('resolved', 'Resolved'),
                        ('suppressed', 'Suppressed'),
                    ],
                    default='active',
                    max_length=20
                )),
                ('notifications_sent', models.JSONField(blank=True, default=dict, help_text="Track which notifications were sent")),
                ('alert_data', models.JSONField(blank=True, default=dict, help_text="Additional alert context")),
                ('first_occurred_at', models.DateTimeField(auto_now_add=True)),
                ('last_occurred_at', models.DateTimeField(auto_now=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('occurrence_count', models.IntegerField(default=1)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('integration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='core.scannerintegration')),
            ],
            options={
                'db_table': 'integration_alerts',
                'ordering': ['-first_occurred_at'],
            },
        ),
        
        # =====================================
        # CREATE INTEGRATION QUOTA TABLE
        # =====================================
        migrations.CreateModel(
            name='IntegrationQuota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monthly_api_calls_limit', models.IntegerField(blank=True, null=True)),
                ('daily_api_calls_limit', models.IntegerField(blank=True, null=True)),
                ('hourly_api_calls_limit', models.IntegerField(blank=True, null=True)),
                ('monthly_api_calls_used', models.IntegerField(default=0)),
                ('daily_api_calls_used', models.IntegerField(default=0)),
                ('hourly_api_calls_used', models.IntegerField(default=0)),
                ('last_monthly_reset', models.DateTimeField(auto_now_add=True)),
                ('last_daily_reset', models.DateTimeField(auto_now_add=True)),
                ('last_hourly_reset', models.DateTimeField(auto_now_add=True)),
                ('quota_exceeded', models.BooleanField(default=False)),
                ('quota_warning_sent', models.BooleanField(default=False)),
                ('integration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quota', to='core.scannerintegration')),
            ],
            options={
                'db_table': 'integration_quotas',
            },
        ),
        
        # =====================================
        # ADD INDEXES FOR PERFORMANCE
        # =====================================
        migrations.AddIndex(
            model_name='scannerintegration',
            index=models.Index(fields=['status'], name='integrations_status_idx'),
        ),
        migrations.AddIndex(
            model_name='scannerintegration',
            index=models.Index(fields=['integration_type'], name='integrations_type_idx'),
        ),
        migrations.AddIndex(
            model_name='scannerintegration',
            index=models.Index(fields=['vendor'], name='integrations_vendor_idx'),
        ),
        migrations.AddIndex(
            model_name='scannerintegration',
            index=models.Index(fields=['health_score'], name='integrations_health_idx'),
        ),
        migrations.AddIndex(
            model_name='scannerintegration',
            index=models.Index(fields=['last_sync_at'], name='integrations_last_sync_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationsynclog',
            index=models.Index(fields=['integration', '-started_at'], name='sync_logs_integration_time_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationsynclog',
            index=models.Index(fields=['status'], name='sync_logs_status_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationsynclog',
            index=models.Index(fields=['trigger_type'], name='sync_logs_trigger_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationalert',
            index=models.Index(fields=['integration', 'status'], name='alerts_integration_status_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationalert',
            index=models.Index(fields=['alert_type', 'severity'], name='alerts_type_severity_idx'),
        ),
        migrations.AddIndex(
            model_name='integrationalert',
            index=models.Index(fields=['status'], name='alerts_status_idx'),
        ),
    ]
