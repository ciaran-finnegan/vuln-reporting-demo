# Generated by Django 4.2.9 on 2025-01-02

from django.db import migrations, models
import django.db.models.deletion


def migrate_asset_types_to_categories(apps, schema_editor):
    """Migrate existing AssetType data to new asset_categories structure"""
    AssetType = apps.get_model('core', 'AssetType')
    AssetCategory = apps.get_model('core', 'AssetCategory')
    AssetSubtype = apps.get_model('core', 'AssetSubtype')
    Asset = apps.get_model('core', 'Asset')
    
    # Create standard categories from ASSET_TYPES.md
    categories_map = {}
    
    # Standard categories
    standard_categories = [
        ('Host', 'Physical servers, VMs, workstations, network devices, IoT'),
        ('Code Project', 'Software codebases, repositories, development projects'),
        ('Website', 'Web-based applications and services'),
        ('Image', 'Container images, running containers, registries'),
        ('Cloud Resource', 'Cloud provider resources and services'),
    ]
    
    for name, description in standard_categories:
        category, created = AssetCategory.objects.get_or_create(
            name=name,
            defaults={'description': description}
        )
        categories_map[name] = category
    
    # Map existing AssetType entries to categories
    asset_type_mapping = {
        'Host': 'Host',
        'Website': 'Website', 
        'Container': 'Image',
        'Code': 'Code Project',
        'Cloud': 'Cloud Resource',
    }
    
    # Migrate existing AssetType data and update Asset records
    for asset_type in AssetType.objects.all():
        # Determine which category this asset type belongs to
        category_name = asset_type_mapping.get(asset_type.name, 'Host')  # Default to Host
        category = categories_map[category_name]
        
        # Create subtype if it doesn't exist
        subtype, created = AssetSubtype.objects.get_or_create(
            category=category,
            name=asset_type.name,
            defaults={'description': f'Migrated from original AssetType: {asset_type.name}'}
        )
        
        # Update all assets that used this asset type
        Asset.objects.filter(asset_type=asset_type).update(
            category=category,
            subtype=subtype
        )


def reverse_migrate_categories_to_asset_types(apps, schema_editor):
    """Reverse migration - restore AssetType data from categories"""
    AssetType = apps.get_model('core', 'AssetType')
    Asset = apps.get_model('core', 'Asset')
    
    # Create AssetType entries for each unique subtype
    for asset in Asset.objects.all():
        if asset.subtype:
            asset_type, created = AssetType.objects.get_or_create(
                name=asset.subtype.name
            )
            asset.asset_type = asset_type
            asset.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0006_multi_scanner_support'),
    ]

    operations = [
        # Create AssetCategory model
        migrations.CreateModel(
            name='AssetCategory',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'asset_category',
                'ordering': ['name'],
            },
        ),
        # Create AssetSubtype model
        migrations.CreateModel(
            name='AssetSubtype',
            fields=[
                ('subtype_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('cloud_provider', models.CharField(blank=True, max_length=20, null=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subtypes', to='core.assetcategory')),
            ],
            options={
                'db_table': 'asset_subtype',
                'ordering': ['category', 'name'],
            },
        ),
        # Add unique constraint for AssetSubtype
        migrations.AddConstraint(
            model_name='assetsubtype',
            constraint=models.UniqueConstraint(fields=('category', 'name', 'cloud_provider'), name='unique_subtype_per_category'),
        ),
        # Add default_asset_category to ScannerIntegration
        migrations.AddField(
            model_name='scannerintegration',
            name='default_asset_category',
            field=models.ForeignKey(blank=True, help_text='Default category for assets from this scanner', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.assetcategory'),
        ),
        # Add new fields to Asset model
        migrations.AddField(
            model_name='asset',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assets', to='core.assetcategory'),
        ),
        migrations.AddField(
            model_name='asset',
            name='subtype',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assets', to='core.assetsubtype'),
        ),
        # Run data migration
        migrations.RunPython(
            migrate_asset_types_to_categories,
            reverse_migrate_categories_to_asset_types
        ),
        # Make category field required after data migration
        migrations.AlterField(
            model_name='asset',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assets', to='core.assetcategory'),
        ),
    ] 